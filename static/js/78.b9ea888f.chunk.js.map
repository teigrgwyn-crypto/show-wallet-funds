{"version":3,"file":"static/js/78.b9ea888f.chunk.js","mappings":"gPASMA,EAAe,CAAEC,QAAS,gDAGhC,SAASC,IACP,OAA0BC,EAAAA,EAAAA,UAASH,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA0BJ,EAAAA,EAAAA,UALP,IAKnB,eAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAQ,IAAIC,EAAAA,UAAU,CAC1BC,IAAK,+BACLC,QAAS,cAYLC,EAAa,mCAAG,WAAOC,GAAP,gFACpBA,EAAEC,iBADkB,SAIlBP,EAzBe,IAqBG,SAKRC,EAAMO,KAAKC,YAAYd,EAAMH,SALrB,sBAKiC,MALjC,2BAMV,IAAIkB,MAAM,qBANA,wBASET,EAAMU,KAAKC,QAAQjB,EAAMH,SAT3B,QAUlBoB,GADIA,EATc,QAUA,GAAGC,OAGrBf,EAAS,IACLgB,EAAa,GAEjBC,OAAOC,QAAQJ,GAASK,SAAQ,SAAAC,GAK9B,IAAIC,EAAQ,EAJZD,EAAOA,EAAK,IAIMC,OACdC,EAAQF,EAAKG,OAAOC,WACxBR,EAAWK,GAASC,KAGtBN,EAAaC,OAAOC,QAAQF,GAAYS,KAAI,SAAAL,GAG1C,OAFAA,EAAK,GAAKA,EAAK,GAAL,SAAU,IAAQ,GAEpBA,EAAK,IACX,IAAK,OAAQA,EAAK,GAAK,MAAO,MAC9B,IAAK,QAASA,EAAK,GAAK,OAAQ,MAChC,IAAK,OAAQA,EAAK,GAAK,MAAO,MAC9B,IAAK,OAAQA,EAAK,GAAK,MAAO,MAC9B,QAASA,EAAK,GAAK,eAGrB,OAAO,UAAGA,EAAK,GAAKA,EAAK,OAI3BM,QAAQC,IAAIX,GAEZhB,EAASgB,GACTlB,EAASL,GA5CS,kDA8ClBO,EAAS,IACTE,EAAS,uDA/CS,0DAAH,sDAmDnB,OACE,iBAAK0B,GAAG,MAAR,WACE,iBAAMA,GAAG,OAAOC,SAAWtB,EAA3B,UACE,kBACEuB,KAAK,UACLC,MAAQlC,EAAMH,QACdsC,SA7Dc,SAACxB,GACrBV,GAAS,kBAAKD,GAAN,cAAcW,EAAEyB,OAAOH,KAAOtB,EAAEyB,OAAOF,UA6DzCG,YAAY,UACZC,WAAW,QACXC,aAAa,WAGjB,gBAAKR,GAAG,QAAR,SAAkB3B,KAClB,0BAEIF,EAAM0B,KAAI,SAAAL,GACR,OACE,iBAAKiB,UAAU,OAAf,WACE,gBAAKA,UAAU,QAAf,SAAyBpB,OAAOqB,KAAKlB,GAAM,MAC3C,gBAAKiB,UAAU,QAAf,SAAyBpB,OAAOsB,OAAOnB,GAAM,GAAGoB,QAAQ,OAF9BvB,OAAOqB,KAAKlB,GAAM,YAY5DqB,EAAAA,QACE,SAAC,KAAD,WACE,SAAC,EAAD,MAEJC,SAASC,eAAe,U","sources":["App.js"],"sourcesContent":["import ReactDOM from 'react-dom';\nimport { useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { LCDClient } from '@terra-money/terra.js';\n\nimport './App.scss';\n\n// terra183lxcc3gca9gmpt538muelexh7whm982y7y7pq\nconst defaultQuery = { address: 'terra183lxcc3gca9gmpt538muelexh7whm982y7y7pq' };\nconst defaultError = '';\n\nfunction App() {\n  const [query, setQuery] = useState(defaultQuery);\n  const [coins, setCoins] = useState([]);\n  const [error, setError] = useState(defaultError);\n\n  const terra = new LCDClient({\n    URL: 'https://bombay-lcd.terra.dev',\n    chainID: 'bombay-12',\n  });\n\n  // const terra = new LCDClient({\n  //   URL: 'http://localhost:1317',\n  //   chainID: 'localterra'\n  // });\n\n  const onQueryChange = (e) => {\n    setQuery({ ...query, [e.target.name]: e.target.value });\n  }\n\n  const onQuerySubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      setError(defaultError);\n      if (await terra.auth.accountInfo(query.address) == null) {\n        throw new Error(\"address not valid\");\n      }\n\n      let balance = await terra.bank.balance(query.address);\n      balance = balance[0]._coins;\n\n      // reset coin state in case a new address is being submitted\n      setCoins([]);\n      let temp_coins = [];\n\n      Object.entries(balance).forEach(coin => {\n        coin = coin[1];\n        // to get non-micro version -> multiply string amount by -> 10 ** (-6)\n        // need to set state all at once to prevent an override loop (unconventional i know)\n        // this also somehow prevents react from detecting coins state as changing, but since the query changes, it'll still work as expected\n        let denom = [coin.denom];\n        let count = coin.amount.toString();\n        temp_coins[denom] = count;\n      });\n\n      temp_coins = Object.entries(temp_coins).map(coin => {\n        coin[1] = coin[1] * 10 ** (-6); // convert to non-micro coin equivalent\n\n        switch (coin[0]) {\n          case 'ukrw': coin[0] = 'KRW'; break;\n          case 'uluna': coin[0] = 'LUNA'; break;\n          case 'usdr': coin[0] = 'SDR'; break;\n          case 'uusd': coin[0] = 'UST'; break;\n          default: coin[0] = 'UNKNOWN COIN';\n        }\n\n        return { [coin[0]]: coin[1] };\n      });\n\n      // for verifying authenticity\n      console.log(temp_coins);\n\n      setCoins(temp_coins);\n      setQuery(defaultQuery);\n    } catch {\n      setCoins([]);\n      setError('Could not complete request; is the address correct?');\n    }\n  }\n\n  return (\n    <div id='app'>\n      <form id='form' onSubmit={ onQuerySubmit }>\n        <input\n          name='address'\n          value={ query.address }\n          onChange={ onQueryChange }\n          placeholder='address'\n          spellCheck='false'\n          autoComplete='off'\n        />\n      </form>\n      <div id='error'>{ error }</div>\n      <main>\n        {\n          coins.map(coin => {\n            return (\n              <div className='coin' key={ Object.keys(coin)[0] }>\n                <div className='denom'>{ Object.keys(coin)[0] }</div>\n                <div className='count'>{ Object.values(coin)[0].toFixed(3) }</div>\n              </div>\n            )\n          })\n        }\n      </main>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\ndocument.getElementById('root')\n);\n\n/*\n  Theme:\n    Bluish: #20232A\n    Dark Bluish: #0D1117\n    Dark Gray: #181A1B\n    Near Black: #0D0D0D\n*/"],"names":["defaultQuery","address","App","useState","query","setQuery","coins","setCoins","error","setError","terra","LCDClient","URL","chainID","onQuerySubmit","e","preventDefault","auth","accountInfo","Error","bank","balance","_coins","temp_coins","Object","entries","forEach","coin","denom","count","amount","toString","map","console","log","id","onSubmit","name","value","onChange","target","placeholder","spellCheck","autoComplete","className","keys","values","toFixed","ReactDOM","document","getElementById"],"sourceRoot":""}